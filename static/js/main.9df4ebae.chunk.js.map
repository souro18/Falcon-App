{"version":3,"sources":["component/vehicle/Vehicle.js","component/planet/Planet.js","component/error/ErrorBoundary.js","component/pair/InputGroup.js","component/modal/Modal.js","component/status/Status.js","APIModule/APIReqest.js","component/app-container/AppContainer.js","component/footer/Footer.js","component/guide/Guide.js","component/header/header.js","App.js","serviceWorker.js","index.js"],"names":["Vehicle","props","className","vehicle","map","v","key","name","data-testid","type","value","id","disabled","total_no","distance","max_distance","onClick","e","onInput","target","forwardRef","ref","selectRef","useRef","useImperativeHandle","load","current","focus","onChange","defaultValue","planet","p","ErrorBoundary","state","hasError","error","errorInfo","console","log","this","children","React","Component","InputGroup","useState","filteredPlanet","setFilterPlanets","filteredVehicle","setFilterVehicle","setDistance","planetRef","useEffect","planets","getFilteredPlanets","selectedPlanet","vehicles","getFilteredVehicle","selectedVehicle","currentSelect","filter","slice","includes","m","num","s","length","Object","assign","style","x","setSelectedPlanet","y","setSelectedVehicle","modalRoot","document","getElementById","Modal","ReactDOM","createPortal","Status","role","setToggle","loading","color","res","status","planet_name","token","headers","setToken","t","getToken","fetch","method","then","json","Container","setPlanets","setVehicles","response","setResponse","setCurrentSelect","isLoading","setIsLoading","isfinding","setFind","toggle","a","Promise","all","data","catch","err","fetchData","time","useMemo","i","speed","getTime","onFindFalcone","body","JSON","stringify","planet_names","vehicle_names","findFalcone","Array","keys","Footer","Guide","Header","setTogggle","App","Boolean","window","location","hostname","match","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9df4ebae.chunk.js","sourcesContent":["import React from 'react'\r\nimport './vehicle.scss'\r\n\r\nconst Vehicle = props => {\r\n    return (\r\n        <div className=\"vehicles form-group\" >\r\n            {props.vehicle.map(v =>\r\n                <div className='vehicle' key={v.name} data-testid=\"vehicle\">\r\n                    <input type='radio' value={v.name} name={'vehicle' + props.id} key={props.name} disabled={v.total_no === 0 || props.distance === 0 || props.distance > v.max_distance} onClick={e => props.onInput(e.target.value)} />\r\n                    <label>\r\n                        <span>{v.name}</span><br/>\r\n                        <span>No. of vehicle: {v.total_no}</span><br />\r\n                        <span>Max Distance: {v.max_distance}</span>\r\n                    </label>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default Vehicle;","import React ,{useRef, useImperativeHandle ,forwardRef} from 'react'\r\n\r\nconst Planet = (props,ref) => {\r\n    const selectRef = useRef(null);\r\n    useImperativeHandle(ref, () => ({\r\n        load: () => {\r\n            selectRef.current.focus();\r\n            selectRef.current.value = 'default'\r\n        }\r\n      }));\r\n    return (\r\n        <div className= \"planets form-group\">\r\n            <select onChange={ (e) => props.onInput(e.target.value)} defaultValue='default' ref={selectRef}>\r\n                <option disabled value='default' >Planets</option>\r\n                {props.planet.map( p => \r\n                    <option value={p.name} key={p.name} data-testid=\"planets\">{p.name} {p.distance}</option>\r\n                    )}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\nexport default forwardRef(Planet)","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true };\r\n  }\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo)\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (<p>Something went wrong.</p>)\r\n    }\r\n    return this.props.children; \r\n  }\r\n}\r\nexport default ErrorBoundary;","import React, { useState, useEffect ,useRef} from 'react'\r\n\r\nimport Vehicle from './../vehicle/Vehicle'\r\nimport Planet from '../planet/Planet'\r\nimport ErrorBoundary from '../error/ErrorBoundary'\r\nconst InputGroup = props => {\r\n    const [filteredPlanet, setFilterPlanets] = useState([])\r\n    const [filteredVehicle, setFilterVehicle] = useState([])\r\n    const [distance , setDistance] = useState(0)\r\n    const planetRef = useRef(null)\r\n    useEffect(() => {\r\n        setFilterPlanets(props.planets)\r\n    }, [props.planets])\r\n    useEffect(() => {\r\n        setFilterPlanets(getFilteredPlanets())\r\n    }, [props.selectedPlanet])\r\n    useEffect(() => {\r\n        setFilterVehicle(props.vehicles)\r\n    }, [props.vehicles])\r\n    useEffect(() => {\r\n        setFilterVehicle(getFilteredVehicle())\r\n    }, [props.selectedVehicle])\r\n    useEffect(()=>{\r\n        planetRef.current.load()\r\n        if(props.currentSelect === 0) {\r\n            setDistance(0)\r\n        }\r\n    },[props.currentSelect])\r\n    const getFilteredPlanets=() => {\r\n        return props.planets.filter(p => !props.selectedPlanet.slice(0, props.id).includes(p.name))\r\n    }\r\n    const getFilteredVehicle = () => {\r\n        return props.vehicles.map(m => {\r\n            let num = props.selectedVehicle.slice(0, props.id).filter(s => s === m.name).length\r\n            if (num > 0) {\r\n                return Object.assign({},m , {total_no: m.total_no - num})\r\n            }\r\n            else return m;\r\n        })\r\n    }\r\n    const onPlanetChange = (planet) => {\r\n        const x = [...props.selectedPlanet.slice(0, props.id), planet]\r\n        props.setSelectedPlanet(x)\r\n        setDistance(props.planets.filter(p => p.name === planet)[0].distance)\r\n    }\r\n    const onVehicleChange = (vehicle) => {\r\n        const y = [...props.selectedVehicle.slice(0, props.id), vehicle]\r\n        props.setSelectedVehicle(y)\r\n    }\r\n    return (\r\n        <div className='group' style={{ 'display': props.currentSelect === props.id ? 'block': 'none'}}>\r\n            <ErrorBoundary><Planet planet={filteredPlanet} onInput={onPlanetChange} ref={planetRef}/></ErrorBoundary>\r\n            <ErrorBoundary><Vehicle vehicle={filteredVehicle} id={props.id} onInput={onVehicleChange} distance={distance}/></ErrorBoundary>\r\n        </div>\r\n    )\r\n}\r\nexport default InputGroup","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './modal.scss'\r\n\r\nconst modalRoot = document.getElementById('modal-root');\r\n\r\nclass Modal extends React.Component {\r\n\trender() {\r\n\t\treturn ReactDOM.createPortal(\r\n            <div className='modal-container'>{this.props.children}</div>\r\n            ,modalRoot);\r\n\t}\r\n}\r\nexport default Modal;","import React from 'react'\r\nimport ReactLoading from \"react-loading\";\r\n\r\nconst Status = props => {\r\n    return (\r\n        <div id=\"modal1\" className=\"modal modal-backdrop\">\r\n            <div className=\"modal-header\">\r\n                <span role='button' onClick={()=> props.setToggle(false)}>X</span>\r\n            </div>\r\n            <div className=\"modal-content\">\r\n                {props.loading && <div className='loading'><ReactLoading type={\"bars\"} color={\"black\"} /></div>}\r\n                {!props.loading && props.res.status === 'false' && <p>Oops! You missed falcon.</p>}\r\n                {!props.loading && props.res.status === 'success' && <p>Yayy!! We found falcon on {props.res.planet_name} planet</p>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Status;","let token = \"\";\r\nconst headers = {\r\n\t'Accept': 'application/json',\r\n\t'Content-Type' :'application/json'\r\n}\r\nconst setToken = t => {\r\n\ttoken = t;\r\n}\r\n\r\nconst getToken = () =>\r\n\tfetch('https://findfalcone.herokuapp.com/token' , {\r\n\t\tmethod : 'POST',\r\n\t\theaders: { 'Accept': 'application/json' }\r\n\t}).then( res => res.json())\r\n\r\nconst getVehicle = () =>\r\n\tfetch('https://findfalcone.herokuapp.com/vehicles')\r\n\t\t.then( res => res.json())\r\n\r\nconst getPlanets = () =>\r\n\tfetch('https://findfalcone.herokuapp.com/planets')\r\n\t\t.then( res => res.json())\r\n\r\nconst findFalcone = (planets , vehicle) =>\r\n\tfetch('https://findfalcone.herokuapp.com/find' , {\r\n\t\tmethod : 'POST',\r\n\t\theaders: headers,\r\n\t\tbody: JSON.stringify( {\r\n\t\t\ttoken : token,\r\n\t\t\tplanet_names : planets,\r\n\t\t\tvehicle_names : vehicle\r\n\t\t})\r\n    }).then(res =>res.json())\r\n\r\nexport { setToken ,  getToken, getVehicle, getPlanets, findFalcone};","import React, { useState, useEffect ,useMemo } from 'react';\r\nimport ReactLoading from \"react-loading\";\r\n\r\nimport './app-container.scss'\r\nimport InputGroup from './../pair/InputGroup'\r\nimport Modal from '../modal/Modal';\r\nimport Status from './../status/Status';\r\nimport ErrorBoundary from './../error/ErrorBoundary'\r\n\r\nimport { getPlanets, getVehicle, findFalcone } from './../../APIModule/APIReqest'\r\n\r\nconst Container = props => {\r\n    const [planets, setPlanets] = useState([])\r\n    const [vehicles, setVehicles] = useState([])\r\n    const [selectedPlanet, setSelectedPlanet] = useState([])\r\n    const [selectedVehicle, setSelectedVehicle] = useState([])\r\n    const [response, setResponse] = useState({})\r\n    const [currentSelect, setCurrentSelect] = useState(0)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [isfinding, setFind] = useState(true)\r\n    const [toggle, setToggle] = useState(false)\r\n    const numberOfChoice = 4\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await Promise.all([getPlanets().then(data => setPlanets(data)).catch(err => console.log(err)),\r\n            getVehicle().then(data => setVehicles(data)).catch(err => console.log(err))])\r\n            setIsLoading(false)\r\n        }\r\n        fetchData()\r\n    }, [])\r\n    \r\n    const getTime = () => {\r\n        let t = 0;\r\n        for (let i = 0; i <= currentSelect; i++) {\r\n            if (selectedPlanet[i] && selectedVehicle[i]) {\r\n                const distance = planets.filter(p => p.name === selectedPlanet[i])[0].distance\r\n                const speed = vehicles.filter(v => v.name === selectedVehicle[i])[0].speed\r\n                t+= distance / speed\r\n            }\r\n        }\r\n        return t;\r\n    }\r\n    const time = useMemo(()=> getTime(), [selectedPlanet,selectedVehicle])\r\n    const onFindFalcone = () => {\r\n        setToggle(true)\r\n        findFalcone(selectedPlanet, selectedVehicle)\r\n            .then(res => {\r\n                setResponse(res)\r\n                setFind(false)\r\n            }).catch(err => console.log(err))\r\n    }\r\n    const resetGame = () => {\r\n        setSelectedPlanet([])\r\n        setSelectedVehicle([])\r\n        setCurrentSelect(0)\r\n    }\r\n    return (\r\n        <main>\r\n            <div className=\"container\">\r\n\r\n                <h2>Find Falcon</h2>\r\n                <ErrorBoundary>\r\n                {isLoading ? (<div className='loading'><ReactLoading type={\"bars\"} color={\"black\"} /></div>) : [...Array(numberOfChoice).keys()].map(id => {\r\n                    return <InputGroup key={id} id={id} planets={planets} vehicles={vehicles}\r\n                        selectedPlanet={selectedPlanet} setSelectedPlanet={setSelectedPlanet}\r\n                        selectedVehicle={selectedVehicle} setSelectedVehicle={setSelectedVehicle}\r\n                        currentSelect={currentSelect} />\r\n                })}\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <p>Time Taken: {time}</p>\r\n                    <div className='container-footer'>\r\n                        <button onClick={() => resetGame()}>Reset</button>\r\n                        <button onClick={() => setCurrentSelect(currentSelect + 1)} disabled={selectedVehicle.length !== currentSelect + 1 || currentSelect + 1 === numberOfChoice}>Next</button>\r\n                        <button onClick={() => onFindFalcone()} disabled={selectedVehicle.length !== numberOfChoice}>Find Falcon</button>\r\n                    </div>\r\n                    {toggle && <Modal><Status loading={isfinding} res={response} setToggle={setToggle} /></Modal>}\r\n                </div>\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\nexport default Container;","import React from 'react'\r\nimport './footer.scss'\r\n\r\nconst Footer = props =>{\r\n    return (\r\n        <div id=\"footer\">\r\n            <p>Made with ReactJS, Flexbox</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Footer\r\n","import React from 'react';\r\n\r\nconst Guide = props => {\r\n    return (\r\n        <div id=\"modal1\" className=\"modal modal-backdrop\">\r\n            <div className=\"modal-header\">\r\n                <span role='button' onClick={() => props.setToggle(false)}>X</span>\r\n            </div>\r\n            <div className=\"modal-content\">\r\n                <h3>How to play</h3>\r\n                <div className='content'>\r\n                    <p>In the planet of Lengaburu…in the distant distant galaxy of Tara B. After the recent war with neighbouring planet Falicornia, King Shan has exiled the Queen of Falicornia for 15 years.</p>\r\n                    <p>Queen Al Falcone is now in hiding. But if King Shan can ﬁnd her before the years are up, she will be exiled for another 15 years….</p>\r\n                    <p>King Shan has received intelligence that Al Falcone is in hiding in one of these 6 planets - DonLon, Enchai, Jebing, Sapir, Lerbin & Pingasor. However he has limited resources at his disposal & can send his army to only 4 of these planets. Every vehicle can travel a maximum distance.</p>\r\n                    <p>You have to help King Shan ﬁnd Al Falcone.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Guide;","import React , {useState} from 'react'\r\nimport './header.scss'\r\n\r\nimport Modal from './../modal/Modal'\r\nimport Guide from './../guide/Guide'\r\nconst Header = props => {\r\n    const [toggle , setTogggle] =useState(false)\r\n    return (\r\n        <div id=\"header\">\r\n            <div className='links'>\r\n                <div className='link' onClick={() => setTogggle(true)}>How to Play</div>\r\n            </div>\r\n            {toggle &&\r\n                <Modal>\r\n                    <Guide setToggle={setTogggle}/>\r\n                </Modal>\r\n             }\r\n        </div>\r\n    )\r\n}\r\nexport default Header;","import React, { useEffect } from 'react';\r\nimport './App.scss';\r\n\r\nimport Container from './component/app-container/AppContainer'\r\nimport Footer from './component/footer/Footer'\r\nimport Header from './component/header/header'\r\nimport ErrorBoundary from './component/error/ErrorBoundary'\r\nimport { getToken, setToken } from './APIModule/APIReqest'\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    getToken().then(data => {\r\n      setToken(data.token)\r\n    }).catch(err => console.log(err))\r\n  }, [])\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorBoundary>\r\n        <Header />\r\n      </ErrorBoundary>\r\n      <ErrorBoundary>\r\n        <Container />\r\n      </ErrorBoundary>\r\n      <ErrorBoundary>\r\n        <Footer />\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}